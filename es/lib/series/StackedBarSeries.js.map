{"version":3,"sources":["../../../../src/lib/series/StackedBarSeries.js"],"names":["React","Component","PropTypes","nest","d3Nest","merge","stack","d3Stack","GenericChartComponent","getAxisCanvas","identity","hexToRGBA","head","functor","plotDataLengthBarWidth","roundRect","ctx","x","y","width","height","radius","fill","stroke","tl","tr","br","bl","defaultRadius","side","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","StackedBarSeries","props","renderSVG","bind","drawOnCanvas","moreProps","xAccessor","drawOnCanvasHelper","svgHelper","clip","propTypes","baseAt","oneOfType","number","func","isRequired","direction","oneOf","bool","opacity","string","className","defaultProps","xScale","yScale","range","widthRatio","swapScales","identityStack","keys","data","response","map","key","i","arrays","array","d","index","arguments","length","stackFn","defaultPostAction","postRotateAction","rotateXY","chartConfig","plotData","bars","doStuff","drawOnCanvas2","convertToArray","item","Array","isArray","getBarsSVG2","yAccessor","modifiedYAccessor","modifiedXAccessor","modifiedXScale","modifiedYScale","postProcessor","getBars","each","idx","entries","forEach","outer","values","strokeStyle","fillStyle","fillRect","after","spaceBetweenBar","getClassName","getFill","getBase","widthFunctor","barWidth","Math","round","eachBarWidth","offset","ds","appearance","eachYAccessor","_","newData","h","groupOffset","groupWidth","filter","isNaN","bar"],"mappings":"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","file":"StackedBarSeries.js","sourcesContent":["\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { nest as d3Nest } from \"d3-collection\";\nimport { merge } from \"d3-array\";\nimport { stack as d3Stack } from \"d3-shape\";\n\nimport GenericChartComponent from \"../GenericChartComponent\";\nimport { getAxisCanvas } from \"../GenericComponent\";\n\nimport { identity, hexToRGBA, head, functor, plotDataLengthBarWidth } from \"../utils\";\n\nfunction roundRect(ctx, x, y, width, height, radius, fill, stroke) {\n  if (typeof stroke == 'undefined') {\n    stroke = true;\n  }\n  if (typeof radius === 'undefined') {\n    radius = 5;\n  }\n  if (width / 2 < radius) {\n      radius = width / 2;\n  }\n  if (height / 2 < radius) {\n      radius = height / 2;\n  }\n\n  if (typeof radius === 'number') {\n    radius = {tl: radius, tr: radius, br: radius, bl: radius};\n  } else {\n    var defaultRadius = {tl: 0, tr: 0, br: 0, bl: 0};\n    for (var side in defaultRadius) {\n      radius[side] = radius[side] || defaultRadius[side];\n    }\n  }\n  ctx.beginPath();\n  ctx.moveTo(x + radius.tl, y);\n  ctx.lineTo(x + width - radius.tr, y);\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);\n  ctx.lineTo(x + width, y + height - radius.br);\n  ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);\n  ctx.lineTo(x + radius.bl, y + height);\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);\n  ctx.lineTo(x, y + radius.tl);\n  ctx.quadraticCurveTo(x, y, x + radius.tl, y);\n  ctx.closePath();\n\n  if (fill) {\n    ctx.fill();\n  }\n  if (stroke) {\n    ctx.stroke();\n  }\n}\n\nclass StackedBarSeries extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.renderSVG = this.renderSVG.bind(this);\n\t\tthis.drawOnCanvas = this.drawOnCanvas.bind(this);\n\t}\n\tdrawOnCanvas(ctx, moreProps) {\n\t\tconst { xAccessor } = moreProps;\n\t\t// var { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\n\t\tdrawOnCanvasHelper(ctx, this.props, moreProps, xAccessor, d3Stack);\n\t}\n\trenderSVG(moreProps) {\n\t\tconst { xAccessor } = moreProps;\n\n\t\treturn <g>{svgHelper(this.props, moreProps, xAccessor, d3Stack)}</g>;\n\t}\n\trender() {\n\t\tconst { clip } = this.props;\n\n\t\treturn <GenericChartComponent\n\t\t\tclip={clip}\n\t\t\tsvgDraw={this.renderSVG}\n\t\t\tcanvasDraw={this.drawOnCanvas}\n\t\t\tcanvasToDraw={getAxisCanvas}\n\t\t\tdrawOn={[\"pan\"]}\n\t\t/>;\n\t}\n}\n\nStackedBarSeries.propTypes = {\n\tbaseAt: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.func,\n\t]).isRequired,\n\tdirection: PropTypes.oneOf([\"up\", \"down\"]).isRequired,\n\tstroke: PropTypes.bool.isRequired,\n\twidth: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.func\n\t]).isRequired,\n\topacity: PropTypes.number.isRequired,\n\tfill: PropTypes.oneOfType([\n\t\tPropTypes.func, PropTypes.string\n\t]).isRequired,\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.func, PropTypes.string\n\t]).isRequired,\n\tclip: PropTypes.bool.isRequired,\n    radius: PropTypes.number\n};\n\nStackedBarSeries.defaultProps = {\n\tbaseAt: (xScale, yScale/* , d*/) => head(yScale.range()),\n\tdirection: \"up\",\n\tclassName: \"bar\",\n\tstroke: true,\n\tfill: \"#4682B4\",\n    radius: 0,\n\topacity: 0.5,\n\twidth: plotDataLengthBarWidth,\n\twidthRatio: 0.8,\n\tclip: true,\n\tswapScales: false,\n};\n\nexport function identityStack() {\n\tlet keys = [];\n\tfunction stack(data) {\n\t\tconst response = keys.map((key, i) => {\n\t\t\t// eslint-disable-next-line prefer-const\n\t\t\tlet arrays = data.map(d => {\n\t\t\t\t// eslint-disable-next-line prefer-const\n\t\t\t\tlet array = [0, d[key]];\n\t\t\t\tarray.data = d;\n\t\t\t\treturn array;\n\t\t\t});\n\t\t\tarrays.key = key;\n\t\t\tarrays.index = i;\n\t\t\treturn arrays;\n\t\t});\n\t\treturn response;\n\t}\n\tstack.keys = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn keys;\n\t\t}\n\t\tkeys = x;\n\t\treturn stack;\n\t};\n\treturn stack;\n}\n\n\nexport function drawOnCanvasHelper(ctx, props, moreProps, xAccessor, stackFn, defaultPostAction = identity, postRotateAction = rotateXY) {\n\tconst { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\n\tconst bars = doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction);\n\n\tdrawOnCanvas2(props, ctx, bars);\n}\n\nfunction convertToArray(item) {\n\treturn Array.isArray(item) ? item : [item];\n}\n\nexport function svgHelper(props, moreProps, xAccessor, stackFn, defaultPostAction = identity, postRotateAction = rotateXY) {\n\tconst { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\tconst bars = doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction);\n\treturn getBarsSVG2(props, bars);\n}\n\nfunction doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction) {\n\tconst { yAccessor, swapScales } = props;\n\n\tconst modifiedYAccessor = swapScales ? convertToArray(props.xAccessor) : convertToArray(yAccessor);\n\tconst modifiedXAccessor = swapScales ? yAccessor : xAccessor;\n\n\tconst modifiedXScale = swapScales ? yScale : xScale;\n\tconst modifiedYScale = swapScales ? xScale : yScale;\n\n\tconst postProcessor =  swapScales ? postRotateAction : defaultPostAction;\n\n\tconst bars = getBars(props, modifiedXAccessor, modifiedYAccessor, modifiedXScale, modifiedYScale, plotData, stackFn, postProcessor);\n\n\treturn bars;\n}\n\nexport const rotateXY = (array) => array.map(each => {\n\treturn {\n\t\t...each,\n\t\tx: each.y,\n\t\ty: each.x,\n\t\theight: each.width,\n\t\twidth: each.height\n\t};\n});\n\nexport function getBarsSVG2(props, bars) {\n\t/* eslint-disable react/prop-types */\n\tconst { opacity } = props;\n\t/* eslint-enable react/prop-types */\n\n\treturn bars.map((d, idx) => {\n\t\tif (d.width <= 1) {\n\t\t\treturn <line key={idx} className={d.className}\n\t\t\t\tstroke={d.fill}\n\t\t\t\tx1={d.x} y1={d.y}\n\t\t\t\tx2={d.x} y2={d.y + d.height} />;\n\t\t}\n\t\treturn <rect key={idx} className={d.className}\n\t\t\tstroke={d.stroke}\n\t\t\tfill={d.fill}\n\t\t\tx={d.x}\n\t\t\ty={d.y}\n\t\t\twidth={d.width}\n\t\t\tfillOpacity={opacity}\n\t\t\theight={d.height} />;\n\t});\n}\n\nexport function drawOnCanvas2(props, ctx, bars) {\n\tconst { stroke } = props;\n\n\tconst nest = d3Nest()\n\t\t.key(d => d.fill)\n\t\t.entries(bars);\n\n\tnest.forEach(outer => {\n\t\tconst { key, values } = outer;\n\t\tif (head(values).width > 1) {\n\t\t\tctx.strokeStyle = key;\n\t\t}\n\t\tconst fillStyle = head(values).width <= 1\n\t\t\t? key\n\t\t\t: hexToRGBA(key, props.opacity);\n\t\tctx.fillStyle = fillStyle;\n\n\t\tvalues.forEach(d => {\n\t\t\tif (d.width <= 1) {\n\t\t\t\t/* <line key={idx} className={d.className}\n\t\t\t\t\t\t\tstroke={stroke}\n\t\t\t\t\t\t\tfill={fill}\n\t\t\t\t\t\t\tx1={d.x} y1={d.y}\n\t\t\t\t\t\t\tx2={d.x} y2={d.y + d.height} />*/\n\t\t\t\t/*\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(d.x, d.y);\n\t\t\t\tctx.lineTo(d.x, d.y + d.height);\n\t\t\t\tctx.stroke();\n\t\t\t\t*/\n\t\t\t\tctx.fillRect(d.x - 0.5, d.y, 1, d.height);\n\t\t\t} else {\n\t\t\t\t/* <rect key={idx} className={d.className}\n\t\t\t\t\t\tstroke={stroke}\n\t\t\t\t\t\tfill={fill}\n\t\t\t\t\t\tx={d.x}\n\t\t\t\t\t\ty={d.y}\n\t\t\t\t\t\twidth={d.width}\n\t\t\t\t\t\theight={d.height} /> */\n\t\t\t\t/*\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.rect(d.x, d.y, d.width, d.height);\n\t\t\t\tctx.fill();\n\t\t\t\t*/\n\n                roundRect(ctx, d.x, d.y, d.width, d.height, props.radius, true, stroke);\n\t\t        //ctx.fillRect(d.x, d.y, d.width, d.height);\n\t\t\t\t//if (stroke) ctx.strokeRect(d.x, d.y, d.width, d.height);\n\t\t\t}\n\n\t\t});\n\t});\n}\n\nexport function getBars(props, xAccessor, yAccessor, xScale, yScale, plotData, stack = identityStack, after = identity) {\n\tconst { baseAt, className, fill, stroke, spaceBetweenBar = 0 } = props;\n\n\tconst getClassName = functor(className);\n\tconst getFill = functor(fill);\n\tconst getBase = functor(baseAt);\n\n\tconst widthFunctor = functor(props.width);\n\tconst width = widthFunctor(props, {\n\t\txScale,\n\t\txAccessor,\n\t\tplotData\n\t});\n\n\tconst barWidth = Math.round(width);\n\n\tconst eachBarWidth = (barWidth - spaceBetweenBar * (yAccessor.length - 1)) / yAccessor.length;\n\n\tconst offset = (barWidth === 1 ? 0 : 0.5 * width);\n\n\tconst ds = plotData\n\t\t.map(each => {\n\t\t\t// eslint-disable-next-line prefer-const\n\t\t\tlet d = {\n\t\t\t\tappearance: {\n\t\t\t\t},\n\t\t\t\tx: xAccessor(each),\n\t\t\t};\n\t\t\tyAccessor.forEach((eachYAccessor, i) => {\n\t\t\t\tconst key = `y${i}`;\n\t\t\t\td[key] = eachYAccessor(each);\n\t\t\t\tconst appearance = {\n\t\t\t\t\tclassName: getClassName(each, i),\n\t\t\t\t\tstroke: stroke ? getFill(each, i) : \"none\",\n\t\t\t\t\tfill: getFill(each, i),\n\t\t\t\t};\n\t\t\t\td.appearance[key] = appearance;\n\t\t\t});\n\t\t\treturn d;\n\t\t});\n\n\tconst keys = yAccessor.map((_, i) => `y${i}`);\n\n\t// console.log(ds);\n\n\tconst data = stack().keys(keys)(ds);\n\n\t// console.log(data);\n\n\tconst newData = data.map((each, i) => {\n\t\tconst key = each.key;\n\t\treturn each.map((d) => {\n\t\t\t// eslint-disable-next-line prefer-const\n\t\t\tlet array = [d[0], d[1]];\n\t\t\tarray.data = {\n\t\t\t\tx: d.data.x,\n\t\t\t\ti,\n\t\t\t\tappearance: d.data.appearance[key]\n\t\t\t};\n\t\t\treturn array;\n\t\t});\n\t});\n\t// console.log(newData);\n\t// console.log(merge(newData));\n\n\tconst bars = merge(newData)\n\t\t// .filter(d => isDefined(d.y))\n\t\t.map(d => {\n\t\t\t// let baseValue = yScale.invert(getBase(xScale, yScale, d.datum));\n\t\t\tlet y = yScale(d[1]);\n\t\t\t/* let h = isDefined(d.y0) && d.y0 !== 0 && !isNaN(d.y0)\n\t\t\t\t\t? yScale(d.y0) - y\n\t\t\t\t\t: getBase(xScale, yScale, d.datum) - yScale(d.y)*/\n\t\t\tlet h = getBase(xScale, yScale, d.data) - yScale(d[1] - d[0]);\n\t\t\t// console.log(d.y, yScale.domain(), yScale.range())\n\t\t\t// let h = ;\n\t\t\t// if (d.y < 0) h = -h;\n\t\t\t// console.log(d, y, h)\n\t\t\tif (h < 0) {\n\t\t\t\ty = y + h;\n\t\t\t\th = -h;\n\t\t\t}\n\t\t\t// console.log(d.data.i, Math.round(offset - (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)))\n\t\t\t/* console.log(d.series, d.datum.date, d.x,\n\t\t\t\t\tgetBase(xScale, yScale, d.datum), `d.y=${d.y}, d.y0=${d.y0}, y=${y}, h=${h}`)*/\n\t\t\treturn {\n\t\t\t\t...d.data.appearance,\n\t\t\t\t// series: d.series,\n\t\t\t\t// i: d.x,\n\t\t\t\tx: Math.round(xScale(d.data.x) - width / 2),\n\t\t\t\ty: y,\n\t\t\t\tgroupOffset: Math.round(offset - (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)),\n\t\t\t\tgroupWidth: Math.round(eachBarWidth),\n\t\t\t\toffset: Math.round(offset),\n\t\t\t\theight: h,\n\t\t\t\twidth: barWidth,\n\t\t\t};\n\t\t})\n\t\t.filter(bar => !isNaN(bar.y));\n\n\treturn after(bars);\n}\n\nexport default StackedBarSeries;\n"]}