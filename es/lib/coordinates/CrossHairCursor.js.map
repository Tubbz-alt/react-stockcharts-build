{"version":3,"sources":["../../../../src/lib/coordinates/CrossHairCursor.js"],"names":["React","Component","PropTypes","GenericComponent","getMouseCanvas","hexToRGBA","isDefined","isNotDefined","strokeDashTypes","getStrokeDasharray","CrossHairCursor","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","dotRadius","dotFill","dotStroke","dotStrokeWidth","lines","helper","context","margin","ratio","originX","left","originY","top","save","setTransform","scale","translate","forEach","dashArray","line","strokeDasharray","split","map","d","lineWidth","strokeWidth","strokeStyle","stroke","opacity","setLineDash","beginPath","moveTo","x1","y1","lineTo","x2","y2","arc","Math","PI","fillStyle","fill","restore","className","idx","rest","propTypes","string","oneOf","yAccessor","func","contextTypes","object","isRequired","number","customX","xScale","xAccessor","currentItem","mouseXY","snapX","x","round","customY","yScale","chartConfig","snapY","y","defaultProps","strokeX","strokeY","strokeWidthX","strokeWidthY","show","height","width","line1","line2"],"mappings":"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","file":"CrossHairCursor.js","sourcesContent":["\"use strict\";\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport GenericComponent, { getMouseCanvas } from \"../GenericComponent\";\n\nimport { hexToRGBA, isDefined, isNotDefined, strokeDashTypes, getStrokeDasharray } from \"../utils\";\n\nclass CrossHairCursor extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.renderSVG = this.renderSVG.bind(this);\n\t\tthis.drawOnCanvas = this.drawOnCanvas.bind(this);\n\t}\n\tdrawOnCanvas(ctx, moreProps) {\n        const { dotRadius, dotFill, dotStroke, dotStrokeWidth } = this.props\n\t\tconst lines = helper(this.props, moreProps);\n\t\tif (isDefined(lines)) {\n\n\t\t\tconst { margin, ratio } = this.context;\n\t\t\tconst originX = 0.5 * ratio + margin.left;\n\t\t\tconst originY = 0.5 * ratio + margin.top;\n\n\t\t\tctx.save();\n\t\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\tctx.scale(ratio, ratio);\n\n\t\t\tctx.translate(originX, originY);\n  \n\t\t\tlines.forEach(line => {\n\t\t\t\tconst dashArray = getStrokeDasharray(line.strokeDasharray).split(\",\").map(d => +d);\n\n                ctx.lineWidth = line.strokeWidth;\n\t\t\t\tctx.strokeStyle = hexToRGBA(line.stroke, line.opacity);\n\t\t\t\tctx.setLineDash(dashArray);\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(line.x1, line.y1);\n\t\t\t\tctx.lineTo(line.x2, line.y2);\n\t\t\t\tctx.stroke();\n\t\t\t});\n\n            ctx.beginPath();\n            ctx.arc(lines[1].x1, lines[0].y1, dotRadius, 0, 2 * Math.PI, false);\n            ctx.fillStyle =  hexToRGBA(dotFill, 1);\n            ctx.fill();\n            ctx.lineWidth = dotStrokeWidth;\n            ctx.strokeStyle = hexToRGBA(dotStroke, 1);\n            ctx.stroke();          \n\t\t\tctx.restore();\n\t\t}\n\t}\n\trenderSVG(moreProps) {\n\t\tconst { className } = this.props;\n\t\tconst lines = helper(this.props, moreProps);\n\n\t\tif (isNotDefined(lines)) return null;\n\n\t\treturn (\n\t\t\t<g className={`react-stockcharts-crosshair ${className}`}>\n\t\t\t\t{lines.map(({ strokeDasharray, ...rest }, idx) =>\n\t\t\t\t\t<line\n\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\tstrokeDasharray={getStrokeDasharray(strokeDasharray)}\n\t\t\t\t\t\t{...rest} />)}\n\t\t\t</g>\n\t\t);\n\t}\n\trender() {\n\t\treturn <GenericComponent\n\t\t\tsvgDraw={this.renderSVG}\n\t\t\tclip={false}\n\t\t\tcanvasDraw={this.drawOnCanvas}\n\t\t\tcanvasToDraw={getMouseCanvas}\n\t\t\tdrawOn={[\"mousemove\", \"pan\", \"drag\"]}\n\t\t/>;\n\t}\n}\n\nCrossHairCursor.propTypes = {\n\tclassName: PropTypes.string,\n\tstrokeDasharray: PropTypes.oneOf(strokeDashTypes),\n    yAccessor: PropTypes.func\n};\n\nCrossHairCursor.contextTypes = {\n\tmargin: PropTypes.object.isRequired,\n\tratio: PropTypes.number.isRequired,\n\t// xScale for getting update event upon pan end, this is needed to get past the PureComponent shouldComponentUpdate\n\t// xScale: PropTypes.func.isRequired,\n};\n\nfunction customX(props, moreProps) {\n\tconst { xScale, xAccessor, currentItem, mouseXY } = moreProps;\n\tconst { snapX } = props;\n\tconst x = snapX\n\t\t? Math.round(xScale(xAccessor(currentItem)))\n\t\t: mouseXY[0];\n\treturn x;\n}\n\nfunction customY(props, moreProps) {\n\tconst { chartConfig: { yScale }, currentItem, mouseXY } = moreProps;\n\tconst { snapY, yAccessor } = props;\n\tconst y = snapY\n\t\t? Math.round(yScale(yAccessor(currentItem)))\n\t\t: mouseXY[1];\n\treturn y;\n}\n\n\nCrossHairCursor.defaultProps = {\n\tstrokeX: \"#666666\",\n    strokeY: \"#666666\",\n    strokeWidthX: 1,\n    strokeWidthY: 1,\n    dotFill: \"#666666\",\n    dotRadius: 0.0,\n    dotStroke: \"#666666\",\n    dotStrokeWidth: 0.0,\n\topacity: 0.3,\n\tstrokeDasharray: \"ShortDash\",\n\tsnapX: true,\n    snapY: false,\n\tcustomX,\n    customY\n};\n\nfunction helper(props, moreProps) {\n\tconst {\n\t\tmouseXY, currentItem, show, height, width\n\t} = moreProps;\n\n\tconst { customX, customY, strokeX, strokeY, strokeWidthX, strokeWidthY, \n        opacity, strokeDasharray } = props;\n\n\tif (!show || isNotDefined(currentItem)) return null;\n\n\tconst x = customX(props, moreProps);\n    const y = customY(props, moreProps);\n\n\tconst line1 = {\n\t\tx1: 0,\n\t\tx2: width,\n\t\ty1: y,\n\t\ty2: y,\n\t\tstroke: strokeY, \n        strokeWidth: strokeWidthY,\n        strokeDasharray, opacity,\n\t};\n\n\tconst line2 = {\n\t\tx1: x,\n\t\tx2: x,\n\t\ty1: 0,\n\t\ty2: height,\n\t\tstroke: strokeX, \n        strokeWidth: strokeWidthX,\n        strokeDasharray, opacity,\n\t};\n\treturn [line1, line2];\n}\n\nexport default CrossHairCursor;\n"]}