{"version":3,"sources":["../../../src/lib/series/LineSeries2.js"],"names":["LineSeries","props","renderSVG","bind","drawOnCanvas","isHover","moreProps","highlightOnHover","yAccessor","hoverTolerance","mouseXY","currentItem","xScale","plotData","chartConfig","yScale","origin","xAccessor","x","y","radius","invert","left","right","cy","cx","hovering1","Math","pow","l","r","x1","y1","x2","y2","m","b","desiredY","round","hovering2","ctx","stroke","strokeWidth","hoverStrokeWidth","defined","strokeDasharray","interpolation","lineCap","lineJoin","connectNulls","hovering","lineWidth","strokeStyle","setLineDash","split","dataSeries","d","curve","beginPath","context","fill","className","console","log","hoverProps","drawOn","canvasToDraw","onClick","onDoubleClick","onContextMenu","propTypes","string","number","func","oneOf","bool","defaultProps","isNaN","e"],"mappings":"AAAA;;;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;AAEA;;;;;;;;;;IAEMA,U;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA,wHACXA,KADW;;AAEjB,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,OAAjB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AACA,UAAKE,OAAL,GAAe,MAAKA,OAAL,CAAaF,IAAb,OAAf;AAJiB;AAKlB;;;;4BACOG,S,EAAW;AACjB;AADiB,mBAEuC,KAAKL,KAF5C;AAAA,UAETM,gBAFS,UAETA,gBAFS;AAAA,UAESC,SAFT,UAESA,SAFT;AAAA,UAEoBC,cAFpB,UAEoBA,cAFpB;;;AAIjB,UAAI,CAACF,gBAAL,EAAuB,OAAO,KAAP;;AAJN,UAMTG,OANS,GAMkCJ,SANlC,CAMTI,OANS;AAAA,UAMAC,WANA,GAMkCL,SANlC,CAMAK,WANA;AAAA,UAMaC,MANb,GAMkCN,SANlC,CAMaM,MANb;AAAA,UAMqBC,QANrB,GAMkCP,SANlC,CAMqBO,QANrB;AAAA,kCAO2BP,SAP3B,CAOTQ,WAPS;AAAA,UAOMC,MAPN,yBAOMA,MAPN;AAAA,UAOcC,MAPd,yBAOcA,MAPd;AAAA,UASTC,SATS,GASKX,SATL,CASTW,SATS;;AAAA,oCAWFP,OAXE;AAAA,UAWVQ,CAXU;AAAA,UAWPC,CAXO;;AAYjB,UAAMC,SAASX,cAAf;;AAZiB,kCAcO,kCAAsBI,QAAtB,EAAgCD,OAAOS,MAAP,CAAcH,CAAd,CAAhC,EAAkDD,SAAlD,CAdP;AAAA,UAcTK,IAdS,yBAcTA,IAdS;AAAA,UAcHC,KAdG,yBAcHA,KAdG;;AAejB,UAAID,SAASC,KAAb,EAAoB;AAClB,YAAMC,KAAKT,OAAOP,UAAUG,WAAV,CAAP,IAAiCK,OAAO,CAAP,CAA5C;AACA,YAAMS,KAAKb,OAAOK,UAAUN,WAAV,CAAP,IAAiCK,OAAO,CAAP,CAA5C;;AAEA,YAAMU,YAAYC,KAAKC,GAAL,CAASV,IAAIO,EAAb,EAAiB,CAAjB,IAAsBE,KAAKC,GAAL,CAAST,IAAIK,EAAb,EAAiB,CAAjB,CAAtB,GAA4CG,KAAKC,GAAL,CAASR,MAAT,EAAiB,CAAjB,CAA9D;;AAEA,eAAOM,SAAP;AACD,OAPD,MAOO;AACL,YAAMG,IAAIhB,SAASS,IAAT,CAAV;AACA,YAAMQ,IAAIjB,SAASU,KAAT,CAAV;AACA,YAAMQ,KAAKnB,OAAOK,UAAUY,CAAV,CAAP,IAAuBb,OAAO,CAAP,CAAlC;AACA,YAAMgB,KAAKjB,OAAOP,UAAUqB,CAAV,CAAP,IAAuBb,OAAO,CAAP,CAAlC;AACA,YAAMiB,KAAKrB,OAAOK,UAAUa,CAAV,CAAP,IAAuBd,OAAO,CAAP,CAAlC;AACA,YAAMkB,KAAKnB,OAAOP,UAAUsB,CAAV,CAAP,IAAuBd,OAAO,CAAP,CAAlC;;AAEA;AACA,YAAMmB,EAAE,WAAF,GAAgB,CAACD,KAAKF,EAAN,KAAaC,KAAKF,EAAlB,CAAtB;AACA,YAAMK,EAAE,iBAAF,GAAsB,CAAC,CAAD,GAAKD,CAAL,GAASJ,EAAT,GAAcC,EAA1C;;AAEA,YAAMK,WAAWV,KAAKW,KAAL,CAAWH,IAAIjB,CAAJ,GAAQkB,CAAnB,CAAjB;;AAEA,YAAMG,YAAYpB,KAAKkB,WAAWjB,MAAhB,IAA0BD,KAAKkB,WAAWjB,MAA5D;;AAEA,eAAOmB,SAAP;AACD;AACF;;;iCACYC,G,EAAKlC,S,EAAW;AAAA,oBAKvB,KAAKL,KALkB;AAAA,UAEzBO,SAFyB,WAEzBA,SAFyB;AAAA,UAEdiC,MAFc,WAEdA,MAFc;AAAA,UAENC,WAFM,WAENA,WAFM;AAAA,UAEOC,gBAFP,WAEOA,gBAFP;AAAA,UAGzBC,OAHyB,WAGzBA,OAHyB;AAAA,UAGhBC,eAHgB,WAGhBA,eAHgB;AAAA,UAGCC,aAHD,WAGCA,aAHD;AAAA,UAIzBC,OAJyB,WAIzBA,OAJyB;AAAA,UAIhBC,QAJgB,WAIhBA,QAJgB;AAAA,UAOnBC,YAPmB,GAOF,KAAKhD,KAPH,CAOnBgD,YAPmB;AAAA,UASnBhC,SATmB,GASLX,SATK,CASnBW,SATmB;AAAA,UAUnBL,MAVmB,GAUqCN,SAVrC,CAUnBM,MAVmB;AAAA,UAUIG,MAVJ,GAUqCT,SAVrC,CAUXQ,WAVW,CAUIC,MAVJ;AAAA,UAUcF,QAVd,GAUqCP,SAVrC,CAUcO,QAVd;AAAA,UAUwBqC,QAVxB,GAUqC5C,SAVrC,CAUwB4C,QAVxB;;;AAY3BV,UAAIW,SAAJ,GAAgBD,WAAWP,gBAAX,GAA8BD,WAA9C;AACAF,UAAIO,OAAJ,GAAcA,OAAd;AACAP,UAAIQ,QAAJ,GAAeA,QAAf;AACAR,UAAIY,WAAJ,GAAkBX,MAAlB;AACAD,UAAIa,WAAJ,CAAgB,+BAAmBR,eAAnB,EAAoCS,KAApC,CAA0C,GAA1C,CAAhB;;AAEA,UAAMC,aAAa,qBAChBrC,CADgB,CACd;AAAA,eAAKN,OAAOK,UAAUuC,CAAV,CAAP,CAAL;AAAA,OADc,EAEhBrC,CAFgB,CAEd;AAAA,eAAKJ,OAAOP,UAAUgD,CAAV,CAAP,CAAL;AAAA,OAFc,CAAnB;;AAIA,UAAI,sBAAUV,aAAV,CAAJ,EAA8B;AAC5BS,mBAAWE,KAAX,CAAiBX,aAAjB;AACD;AACD,UAAI,CAACG,YAAL,EAAmB;AACjBM,mBAAWX,OAAX,CAAmB;AAAA,iBAAKA,QAAQpC,UAAUgD,CAAV,CAAR,CAAL;AAAA,SAAnB;AACD;;AAEDhB,UAAIkB,SAAJ;AACAH,iBAAWI,OAAX,CAAmBnB,GAAnB,EAAwB3B,QAAxB;AACA2B,UAAIC,MAAJ;AACA;;;;;;;;;;;;;AAeD;;;8BACSnC,S,EAAW;AAAA,oBAIT,KAAKL,KAJI;AAAA,UACXO,SADW,WACXA,SADW;AAAA,UACAiC,MADA,WACAA,MADA;AAAA,UACQC,WADR,WACQA,WADR;AAAA,UACqBC,gBADrB,WACqBA,gBADrB;AAAA,UAEZI,OAFY,WAEZA,OAFY;AAAA,UAEHC,QAFG,WAEHA,QAFG;AAAA,UAGZJ,OAHY,WAGZA,OAHY;AAAA,UAGHC,eAHG,WAGHA,eAHG;AAAA,UAKXI,YALW,GAKM,KAAKhD,KALX,CAKXgD,YALW;AAAA,UAMXH,aANW,GAMO,KAAK7C,KANZ,CAMX6C,aANW;AAAA,UAOX7B,SAPW,GAOGX,SAPH,CAOXW,SAPW;AAAA,UASXL,MATW,GAS6CN,SAT7C,CASXM,MATW;AAAA,UASYG,MATZ,GAS6CT,SAT7C,CASHQ,WATG,CASYC,MATZ;AAAA,UASsBF,QATtB,GAS6CP,SAT7C,CASsBO,QATtB;AAAA,UASgCqC,QAThC,GAS6C5C,SAT7C,CASgC4C,QAThC;;;AAWnB,UAAMK,aAAa,qBAChBrC,CADgB,CACd;AAAA,eAAKN,OAAOK,UAAUuC,CAAV,CAAP,CAAL;AAAA,OADc,EAEhBrC,CAFgB,CAEd;AAAA,eAAKJ,OAAOP,UAAUgD,CAAV,CAAP,CAAL;AAAA,OAFc,CAAnB;;AAIA,UAAI,sBAAUV,aAAV,CAAJ,EAA8B;AAC5BS,mBAAWE,KAAX,CAAiBX,aAAjB;AACD;AACD,UAAI,CAACG,YAAL,EAAmB;AACjBM,mBAAWX,OAAX,CAAmB;AAAA,iBAAKA,QAAQpC,UAAUgD,CAAV,CAAR,CAAL;AAAA,SAAnB;AACD;AACD,UAAMA,IAAID,WAAW1C,QAAX,CAAV;;AArBmB,oBAuBS,KAAKZ,KAvBd;AAAA,UAuBX2D,IAvBW,WAuBXA,IAvBW;AAAA,UAuBLC,SAvBK,WAuBLA,SAvBK;;;AAyBnBC,cAAQC,GAAR,CAAYhB,OAAZ,EAAqBC,QAArB;;AAEA,aAAO,wCAAM,WAAca,SAAd,UAA2BpB,SAAS,EAAT,GAAc,cAAzC,CAAN;AACL,WAAGe,CADE;AAEL,gBAAQf,MAFH;AAGL,uBAAeM,OAHV;AAIL,wBAAgBC,QAJX;AAKL,qBAAaE,WAAWP,gBAAX,GAA8BD,WALtC;AAML,yBAAiB,+BAAmBG,eAAnB,CANZ;AAOL,cAAMe;AAPD,QAAP;AASD;;;6BACQ;AAAA,UACCrD,gBADD,GACsB,KAAKN,KAD3B,CACCM,gBADD;;AAEP,UAAMyD,aAAazD,mBACf;AACAF,iBAAS,KAAKA,OADd;AAEA4D,gBAAQ,CAAC,WAAD,EAAc,KAAd,CAFR;AAGAC;AAHA,OADe,GAMf;AACAD,gBAAQ,CAAC,KAAD,CADR;AAEAC;AAFA,OANJ;;AAWA,aAAO;AACL,iBAAS,KAAKhE,SADT;;AAGL,oBAAY,KAAKE,YAHZ;;AAKL,0BAAkB,KAAKH,KAAL,CAAWkE,OALxB;AAML,gCAAwB,KAAKlE,KAAL,CAAWmE,aAN9B;AAOL,gCAAwB,KAAKnE,KAAL,CAAWoE;AAP9B,SAQDL,UARC,EAAP;AAUD;;;;;;AAGH;;;;;;;;;;;;;;;AAeAhE,WAAWsE,SAAX,GAAuB;AACrBT,aAAW,oBAAUU,MADA;AAErB7B,eAAa,oBAAU8B,MAFF;AAGrB/B,UAAQ,oBAAU8B,MAHG;AAIrBxB,WAAS,oBAAUwB,MAJE;AAKrBvB,YAAU,oBAAUuB,MALC;AAMrB5B,oBAAkB,oBAAU6B,MANP;AAOrBZ,QAAM,oBAAUW,MAPK;AAQrB3B,WAAS,oBAAU6B,IARE;AASrBhE,kBAAgB,oBAAU+D,MATL;AAUrB3B,mBAAiB,oBAAU6B,KAAV,wBAVI;AAWrBnE,oBAAkB,oBAAUoE,IAXP;AAYrBR,WAAS,oBAAUM,IAZE;AAarBL,iBAAe,oBAAUK,IAbJ;AAcrBJ,iBAAe,oBAAUI,IAdJ;AAerBjE,aAAW,oBAAUiE,IAfA;AAgBrBxB,gBAAc,oBAAU0B,IAhBH;AAiBrB7B,iBAAe,oBAAU2B;AAjBJ,CAAvB;;AAoBAzE,WAAW4E,YAAX,GAA0B;AACxBf,aAAW,OADa;AAExBnB,eAAa,CAFW;AAGxBC,oBAAkB,CAHM;AAIxBI,WAAS,OAJe;AAKxBC,YAAU,OALc;AAMxBY,QAAM,MANkB;AAOxBnB,UAAQ,SAPgB;AAQxBI,mBAAiB,OARO;AASxBD,WAAS;AAAA,WAAK,CAACiC,MAAMrB,CAAN,CAAN;AAAA,GATe;AAUxB/C,kBAAgB,CAVQ;AAWxBF,oBAAkB,KAXM;AAYxB0C,gBAAc,KAZU;AAaxBkB,WAAS,iBAASW,CAAT,EAAY;AAAEhB,YAAQC,GAAR,CAAY,OAAZ,EAAqBe,CAArB;AAA0B,GAbzB;AAcxBV,iBAAe,uBAASU,CAAT,EAAY;AAAEhB,YAAQC,GAAR,CAAY,cAAZ,EAA4Be,CAA5B;AAAiC,GAdtC;AAexBT,iBAAe,uBAASS,CAAT,EAAY;AAAEhB,YAAQC,GAAR,CAAY,aAAZ,EAA2Be,CAA3B;AAAgC;AAfrC,CAA1B;;kBAkBe9E,U","file":"LineSeries2.js","sourcesContent":["\"use strict\";\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { line as d3Line } from \"d3-shape\";\n\nimport GenericChartComponent from \"../GenericChartComponent\";\nimport { getAxisCanvas, getMouseCanvas } from \"../GenericComponent\";\n\nimport { isDefined, getClosestItemIndexes, strokeDashTypes, getStrokeDasharray } from \"../utils\";\n\nclass LineSeries extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n    this.isHover = this.isHover.bind(this);\n  }\n  isHover(moreProps) {\n    // console.log(\"HERE\")\n    const { highlightOnHover, yAccessor, hoverTolerance } = this.props;\n\n    if (!highlightOnHover) return false;\n\n    const { mouseXY, currentItem, xScale, plotData } = moreProps;\n    const { chartConfig: { yScale, origin } } = moreProps;\n\n    const { xAccessor } = moreProps;\n\n    const [x, y] = mouseXY;\n    const radius = hoverTolerance;\n\n    const { left, right } = getClosestItemIndexes(plotData, xScale.invert(x), xAccessor);\n    if (left === right) {\n      const cy = yScale(yAccessor(currentItem)) + origin[1];\n      const cx = xScale(xAccessor(currentItem)) + origin[0];\n\n      const hovering1 = Math.pow(x - cx, 2) + Math.pow(y - cy, 2) < Math.pow(radius, 2);\n\n      return hovering1;\n    } else {\n      const l = plotData[left];\n      const r = plotData[right];\n      const x1 = xScale(xAccessor(l)) + origin[0];\n      const y1 = yScale(yAccessor(l)) + origin[1];\n      const x2 = xScale(xAccessor(r)) + origin[0];\n      const y2 = yScale(yAccessor(r)) + origin[1];\n\n      // y = m * x + b\n      const m /* slope */ = (y2 - y1) / (x2 - x1);\n      const b /* y intercept */ = -1 * m * x1 + y1;\n\n      const desiredY = Math.round(m * x + b);\n\n      const hovering2 = y >= desiredY - radius && y <= desiredY + radius;\n\n      return hovering2;\n    }\n  }\n  drawOnCanvas(ctx, moreProps) {\n    const {\n      yAccessor, stroke, strokeWidth, hoverStrokeWidth,\n      defined, strokeDasharray, interpolation,\n      lineCap, lineJoin\n    } = this.props;\n\n    const { connectNulls } = this.props;\n\n    const { xAccessor } = moreProps;\n    const { xScale, chartConfig: { yScale }, plotData, hovering } = moreProps;\n\n    ctx.lineWidth = hovering ? hoverStrokeWidth : strokeWidth;\n    ctx.lineCap = lineCap;\n    ctx.lineJoin = lineJoin;\n    ctx.strokeStyle = stroke;\n    ctx.setLineDash(getStrokeDasharray(strokeDasharray).split(\",\"));\n\n    const dataSeries = d3Line()\n      .x(d => xScale(xAccessor(d)))\n      .y(d => yScale(yAccessor(d)));\n\n    if (isDefined(interpolation)) {\n      dataSeries.curve(interpolation);\n    }\n    if (!connectNulls) {\n      dataSeries.defined(d => defined(yAccessor(d)));\n    }\n\n    ctx.beginPath();\n    dataSeries.context(ctx)(plotData);\n    ctx.stroke();\n    /*\n    let points = [];\n    for (let i = 0; i < plotData.length; i++) {\n      const d = plotData[i];\n      if (defined(yAccessor(d), i)) {\n        const [x, y] = [xScale(xAccessor(d)), yScale(yAccessor(d))];\n\n        points.push([x, y]);\n      } else if (points.length) {\n        segment(points, ctx);\n        points = connectNulls ? points : [];\n      }\n    }\n\n    if (points.length) segment(points, ctx);*/\n  }\n  renderSVG(moreProps) {\n    const { yAccessor, stroke, strokeWidth, hoverStrokeWidth,\n           lineCap, lineJoin,\n           defined, strokeDasharray\n          } = this.props;\n    const { connectNulls } = this.props;\n    const { interpolation } = this.props;\n    const { xAccessor } = moreProps;\n\n    const { xScale, chartConfig: { yScale }, plotData, hovering } = moreProps;\n\n    const dataSeries = d3Line()\n      .x(d => xScale(xAccessor(d)))\n      .y(d => yScale(yAccessor(d)));\n\n    if (isDefined(interpolation)) {\n      dataSeries.curve(interpolation);\n    }\n    if (!connectNulls) {\n      dataSeries.defined(d => defined(yAccessor(d)));\n    }\n    const d = dataSeries(plotData);\n\n    const { fill, className } = this.props;\n\n    console.log(lineCap, lineJoin)\n\n    return <path className={`${className} ${stroke ? \"\" : \" line-stroke\"}`}\n      d={d}\n      stroke={stroke}\n      strokeLinecap={lineCap}\n      strokeLinejoin={lineJoin}\n      strokeWidth={hovering ? hoverStrokeWidth : strokeWidth}\n      strokeDasharray={getStrokeDasharray(strokeDasharray)}\n      fill={fill}\n    />;\n  }\n  render() {\n    const { highlightOnHover } = this.props;\n    const hoverProps = highlightOnHover\n      ? {\n        isHover: this.isHover,\n        drawOn: [\"mousemove\", \"pan\"],\n        canvasToDraw: getMouseCanvas\n      }\n      : {\n        drawOn: [\"pan\"],\n        canvasToDraw: getAxisCanvas\n      };\n\n    return <GenericChartComponent\n      svgDraw={this.renderSVG}\n\n      canvasDraw={this.drawOnCanvas}\n\n      onClickWhenHover={this.props.onClick}\n      onDoubleClickWhenHover={this.props.onDoubleClick}\n      onContextMenuWhenHover={this.props.onContextMenu}\n      {...hoverProps}\n    />;\n  }\n}\n\n/*\nfunction segment(points, ctx) {\n  ctx.beginPath();\n\n  const [x, y] = first(points);\n  ctx.moveTo(x, y);\n  for (let i = 1; i < points.length; i++) {\n    const [x1, y1] = points[i];\n    ctx.lineTo(x1, y1);\n  }\n\n  ctx.stroke();\n}\n*/\n\nLineSeries.propTypes = {\n  className: PropTypes.string,\n  strokeWidth: PropTypes.number,\n  stroke: PropTypes.string,\n  lineCap: PropTypes.string,\n  lineJoin: PropTypes.string,\n  hoverStrokeWidth: PropTypes.number,\n  fill: PropTypes.string,\n  defined: PropTypes.func,\n  hoverTolerance: PropTypes.number,\n  strokeDasharray: PropTypes.oneOf(strokeDashTypes),\n  highlightOnHover: PropTypes.bool,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  yAccessor: PropTypes.func,\n  connectNulls: PropTypes.bool,\n  interpolation: PropTypes.func,\n};\n\nLineSeries.defaultProps = {\n  className: \"line \",\n  strokeWidth: 1,\n  hoverStrokeWidth: 4,\n  lineCap: \"round\",\n  lineJoin: \"round\",\n  fill: \"none\",\n  stroke: \"#4682B4\",\n  strokeDasharray: \"Solid\",\n  defined: d => !isNaN(d),\n  hoverTolerance: 6,\n  highlightOnHover: false,\n  connectNulls: false,\n  onClick: function(e) { console.log(\"Click\", e); },\n  onDoubleClick: function(e) { console.log(\"Double Click\", e); },\n  onContextMenu: function(e) { console.log(\"Right Click\", e); },\n};\n\nexport default LineSeries;\n"]}