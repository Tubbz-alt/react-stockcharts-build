{"version":3,"sources":["../../../src/lib/series/StackedBarSeries.js"],"names":["identityStack","drawOnCanvasHelper","svgHelper","getBarsSVG2","drawOnCanvas2","getBars","roundRect","ctx","x","y","width","height","r","fill","stroke","radiusPx","Math","min","radius","tl","tr","br","bl","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","StackedBarSeries","props","renderSVG","bind","drawOnCanvas","moreProps","xAccessor","clip","propTypes","baseAt","oneOfType","number","func","isRequired","direction","oneOf","bool","opacity","string","className","defaultProps","xScale","yScale","range","widthRatio","swapScales","keys","stack","data","response","map","key","i","arrays","array","d","index","arguments","length","stackFn","defaultPostAction","postRotateAction","rotateXY","chartConfig","plotData","bars","doStuff","convertToArray","item","Array","isArray","yAccessor","modifiedYAccessor","modifiedXAccessor","modifiedXScale","modifiedYScale","postProcessor","each","idx","nest","entries","forEach","outer","values","strokeStyle","fillStyle","fillRect","after","spaceBetweenBar","getClassName","getFill","getBase","widthFunctor","barWidth","round","eachBarWidth","offset","ds","appearance","eachYAccessor","_","newData","h","groupOffset","groupWidth","filter","isNaN","bar"],"mappings":"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","file":"StackedBarSeries.js","sourcesContent":["\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { nest as d3Nest } from \"d3-collection\";\nimport { merge } from \"d3-array\";\nimport { stack as d3Stack } from \"d3-shape\";\n\nimport GenericChartComponent from \"../GenericChartComponent\";\nimport { getAxisCanvas } from \"../GenericComponent\";\n\nimport { identity, hexToRGBA, head, functor, plotDataLengthBarWidth } from \"../utils\";\n\nfunction roundRect(ctx, x, y, width, height, r, fill, stroke) {\n  const radiusPx = Math.min(height / 2, r || 0);\n\n  if (typeof stroke == 'undefined') {\n    stroke = true;\n  }\n\n  if (typeof fill == 'undefined') {\n    fill = true;\n  }\n\n  const radius = {tl: radiusPx, tr: radiusPx, br: radiusPx, bl: radiusPx};\n\n  ctx.beginPath();\n  ctx.moveTo(x + radius.tl, y);\n  ctx.lineTo(x + width - radius.tr, y);\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);\n  ctx.lineTo(x + width, y + height - radius.br);\n  ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);\n  ctx.lineTo(x + radius.bl, y + height);\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);\n  ctx.lineTo(x, y + radius.tl);\n  ctx.quadraticCurveTo(x, y, x + radius.tl, y);\n  ctx.closePath();\n\n  if (fill) {\n    ctx.fill();\n  }\n  if (stroke) {\n    ctx.stroke();\n  }\n}\n\nclass StackedBarSeries extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.renderSVG = this.renderSVG.bind(this);\n\t\tthis.drawOnCanvas = this.drawOnCanvas.bind(this);\n\t}\n\tdrawOnCanvas(ctx, moreProps) {\n\t\tconst { xAccessor } = moreProps;\n\t\t// var { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\n\t\tdrawOnCanvasHelper(ctx, this.props, moreProps, xAccessor, d3Stack);\n\t}\n\trenderSVG(moreProps) {\n\t\tconst { xAccessor } = moreProps;\n\n\t\treturn <g>{svgHelper(this.props, moreProps, xAccessor, d3Stack)}</g>;\n\t}\n\trender() {\n\t\tconst { clip } = this.props;\n\n\t\treturn <GenericChartComponent\n\t\t\tclip={clip}\n\t\t\tsvgDraw={this.renderSVG}\n\t\t\tcanvasDraw={this.drawOnCanvas}\n\t\t\tcanvasToDraw={getAxisCanvas}\n\t\t\tdrawOn={[\"pan\"]}\n\t\t/>;\n\t}\n}\n\nStackedBarSeries.propTypes = {\n\tbaseAt: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.func,\n\t]).isRequired,\n\tdirection: PropTypes.oneOf([\"up\", \"down\"]).isRequired,\n\tstroke: PropTypes.bool.isRequired,\n\twidth: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.func\n\t]).isRequired,\n\topacity: PropTypes.number.isRequired,\n\tfill: PropTypes.oneOfType([\n\t\tPropTypes.func, PropTypes.string\n\t]).isRequired,\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.func, PropTypes.string\n\t]).isRequired,\n\tclip: PropTypes.bool.isRequired,\n    radius: PropTypes.number\n};\n\nStackedBarSeries.defaultProps = {\n\tbaseAt: (xScale, yScale/* , d*/) => head(yScale.range()),\n\tdirection: \"up\",\n\tclassName: \"bar\",\n\tstroke: true,\n\tfill: \"#4682B4\",\n    radius: 0,\n\topacity: 0.5,\n\twidth: plotDataLengthBarWidth,\n\twidthRatio: 0.8,\n\tclip: true,\n\tswapScales: false,\n};\n\nexport function identityStack() {\n\tlet keys = [];\n\tfunction stack(data) {\n\t\tconst response = keys.map((key, i) => {\n\t\t\t// eslint-disable-next-line prefer-const\n\t\t\tlet arrays = data.map(d => {\n\t\t\t\t// eslint-disable-next-line prefer-const\n\t\t\t\tlet array = [0, d[key]];\n\t\t\t\tarray.data = d;\n\t\t\t\treturn array;\n\t\t\t});\n\t\t\tarrays.key = key;\n\t\t\tarrays.index = i;\n\t\t\treturn arrays;\n\t\t});\n\t\treturn response;\n\t}\n\tstack.keys = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn keys;\n\t\t}\n\t\tkeys = x;\n\t\treturn stack;\n\t};\n\treturn stack;\n}\n\n\nexport function drawOnCanvasHelper(ctx, props, moreProps, xAccessor, stackFn, defaultPostAction = identity, postRotateAction = rotateXY) {\n\tconst { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\n\tconst bars = doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction);\n\n\tdrawOnCanvas2(props, ctx, bars);\n}\n\nfunction convertToArray(item) {\n\treturn Array.isArray(item) ? item : [item];\n}\n\nexport function svgHelper(props, moreProps, xAccessor, stackFn, defaultPostAction = identity, postRotateAction = rotateXY) {\n\tconst { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\tconst bars = doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction);\n\treturn getBarsSVG2(props, bars);\n}\n\nfunction doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction) {\n\tconst { yAccessor, swapScales } = props;\n\n\tconst modifiedYAccessor = swapScales ? convertToArray(props.xAccessor) : convertToArray(yAccessor);\n\tconst modifiedXAccessor = swapScales ? yAccessor : xAccessor;\n\n\tconst modifiedXScale = swapScales ? yScale : xScale;\n\tconst modifiedYScale = swapScales ? xScale : yScale;\n\n\tconst postProcessor =  swapScales ? postRotateAction : defaultPostAction;\n\n\tconst bars = getBars(props, modifiedXAccessor, modifiedYAccessor, modifiedXScale, modifiedYScale, plotData, stackFn, postProcessor);\n\n\treturn bars;\n}\n\nexport const rotateXY = (array) => array.map(each => {\n\treturn {\n\t\t...each,\n\t\tx: each.y,\n\t\ty: each.x,\n\t\theight: each.width,\n\t\twidth: each.height\n\t};\n});\n\nexport function getBarsSVG2(props, bars) {\n\t/* eslint-disable react/prop-types */\n\tconst { opacity } = props;\n\t/* eslint-enable react/prop-types */\n\n\treturn bars.map((d, idx) => {\n\t\tif (d.width <= 1) {\n\t\t\treturn <line key={idx} className={d.className}\n\t\t\t\tstroke={d.fill}\n\t\t\t\tx1={d.x} y1={d.y}\n\t\t\t\tx2={d.x} y2={d.y + d.height} />;\n\t\t}\n\t\treturn <rect key={idx} className={d.className}\n\t\t\tstroke={d.stroke}\n\t\t\tfill={d.fill}\n\t\t\tx={d.x}\n\t\t\ty={d.y}\n\t\t\twidth={d.width}\n\t\t\tfillOpacity={opacity}\n\t\t\theight={d.height} />;\n\t});\n}\n\nexport function drawOnCanvas2(props, ctx, bars) {\n\tconst { stroke } = props;\n\n\tconst nest = d3Nest()\n\t\t.key(d => d.fill)\n\t\t.entries(bars);\n\n\tnest.forEach(outer => {\n\t\tconst { key, values } = outer;\n\t\tif (head(values).width > 1) {\n\t\t\tctx.strokeStyle = key;\n\t\t}\n\t\tconst fillStyle = head(values).width <= 1\n\t\t\t? key\n\t\t\t: hexToRGBA(key, props.opacity);\n\t\tctx.fillStyle = fillStyle;\n\n\t\tvalues.forEach(d => {\n\t\t\tif (d.width <= 1) {\n\t\t\t\t/* <line key={idx} className={d.className}\n\t\t\t\t\t\t\tstroke={stroke}\n\t\t\t\t\t\t\tfill={fill}\n\t\t\t\t\t\t\tx1={d.x} y1={d.y}\n\t\t\t\t\t\t\tx2={d.x} y2={d.y + d.height} />*/\n\t\t\t\t/*\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(d.x, d.y);\n\t\t\t\tctx.lineTo(d.x, d.y + d.height);\n\t\t\t\tctx.stroke();\n\t\t\t\t*/\n\t\t\t\tctx.fillRect(d.x - 0.5, d.y, 1, d.height);\n\t\t\t} else {\n\t\t\t\t/* <rect key={idx} className={d.className}\n\t\t\t\t\t\tstroke={stroke}\n\t\t\t\t\t\tfill={fill}\n\t\t\t\t\t\tx={d.x}\n\t\t\t\t\t\ty={d.y}\n\t\t\t\t\t\twidth={d.width}\n\t\t\t\t\t\theight={d.height} /> */\n\t\t\t\t/*\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.rect(d.x, d.y, d.width, d.height);\n\t\t\t\tctx.fill();\n\t\t\t\t*/\n\n                roundRect(ctx, d.x, d.y, d.width, d.height, props.radius, true, stroke);\n\t\t        //ctx.fillRect(d.x, d.y, d.width, d.height);\n\t\t\t\t//if (stroke) ctx.strokeRect(d.x, d.y, d.width, d.height);\n\t\t\t}\n\n\t\t});\n\t});\n}\n\nexport function getBars(props, xAccessor, yAccessor, xScale, yScale, plotData, stack = identityStack, after = identity) {\n\tconst { baseAt, className, fill, stroke, spaceBetweenBar = 0 } = props;\n\n\tconst getClassName = functor(className);\n\tconst getFill = functor(fill);\n\tconst getBase = functor(baseAt);\n\n\tconst widthFunctor = functor(props.width);\n\tconst width = widthFunctor(props, {\n\t\txScale,\n\t\txAccessor,\n\t\tplotData\n\t});\n\n\tconst barWidth = Math.round(width);\n\n\tconst eachBarWidth = (barWidth - spaceBetweenBar * (yAccessor.length - 1)) / yAccessor.length;\n\n\tconst offset = (barWidth === 1 ? 0 : 0.5 * width);\n\n\tconst ds = plotData\n\t\t.map(each => {\n\t\t\t// eslint-disable-next-line prefer-const\n\t\t\tlet d = {\n\t\t\t\tappearance: {\n\t\t\t\t},\n\t\t\t\tx: xAccessor(each),\n\t\t\t};\n\t\t\tyAccessor.forEach((eachYAccessor, i) => {\n\t\t\t\tconst key = `y${i}`;\n\t\t\t\td[key] = eachYAccessor(each);\n\t\t\t\tconst appearance = {\n\t\t\t\t\tclassName: getClassName(each, i),\n\t\t\t\t\tstroke: stroke ? getFill(each, i) : \"none\",\n\t\t\t\t\tfill: getFill(each, i),\n\t\t\t\t};\n\t\t\t\td.appearance[key] = appearance;\n\t\t\t});\n\t\t\treturn d;\n\t\t});\n\n\tconst keys = yAccessor.map((_, i) => `y${i}`);\n\n\t// console.log(ds);\n\n\tconst data = stack().keys(keys)(ds);\n\n\t// console.log(data);\n\n\tconst newData = data.map((each, i) => {\n\t\tconst key = each.key;\n\t\treturn each.map((d) => {\n\t\t\t// eslint-disable-next-line prefer-const\n\t\t\tlet array = [d[0], d[1]];\n\t\t\tarray.data = {\n\t\t\t\tx: d.data.x,\n\t\t\t\ti,\n\t\t\t\tappearance: d.data.appearance[key]\n\t\t\t};\n\t\t\treturn array;\n\t\t});\n\t});\n\t// console.log(newData);\n\t// console.log(merge(newData));\n\n\tconst bars = merge(newData)\n\t\t// .filter(d => isDefined(d.y))\n\t\t.map(d => {\n\t\t\t// let baseValue = yScale.invert(getBase(xScale, yScale, d.datum));\n\t\t\tlet y = yScale(d[1]);\n\t\t\t/* let h = isDefined(d.y0) && d.y0 !== 0 && !isNaN(d.y0)\n\t\t\t\t\t? yScale(d.y0) - y\n\t\t\t\t\t: getBase(xScale, yScale, d.datum) - yScale(d.y)*/\n\t\t\tlet h = getBase(xScale, yScale, d.data) - yScale(d[1] - d[0]);\n\t\t\t// console.log(d.y, yScale.domain(), yScale.range())\n\t\t\t// let h = ;\n\t\t\t// if (d.y < 0) h = -h;\n\t\t\t// console.log(d, y, h)\n\t\t\tif (h < 0) {\n\t\t\t\ty = y + h;\n\t\t\t\th = -h;\n\t\t\t}\n\t\t\t// console.log(d.data.i, Math.round(offset - (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)))\n\t\t\t/* console.log(d.series, d.datum.date, d.x,\n\t\t\t\t\tgetBase(xScale, yScale, d.datum), `d.y=${d.y}, d.y0=${d.y0}, y=${y}, h=${h}`)*/\n\t\t\treturn {\n\t\t\t\t...d.data.appearance,\n\t\t\t\t// series: d.series,\n\t\t\t\t// i: d.x,\n\t\t\t\tx: Math.round(xScale(d.data.x) - width / 2),\n\t\t\t\ty: y,\n\t\t\t\tgroupOffset: Math.round(offset - (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)),\n\t\t\t\tgroupWidth: Math.round(eachBarWidth),\n\t\t\t\toffset: Math.round(offset),\n\t\t\t\theight: h,\n\t\t\t\twidth: barWidth,\n\t\t\t};\n\t\t})\n\t\t.filter(bar => !isNaN(bar.y));\n\n\treturn after(bars);\n}\n\nexport default StackedBarSeries;\n"]}